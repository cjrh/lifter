name: ci
on:
  pull_request:
  push:
    branches:
    - master
  schedule:
  - cron: '00 01 * * *'

permissions:
  contents: read

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: test
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    runs-on: ${{ matrix.os }}
    needs: dependency-scan
    strategy:
      fail-fast: false
      matrix:
        build:
        # We test lifter on a pinned version of Rust, along with the moving
        # targets of 'stable' and 'beta' for good measure.
        - pinned
        - stable
        - beta
        # Our release builds are generated by a nightly compiler to take
        # advantage of the latest optimizations/compile time improvements. So
        # we test all of them here. (We don't do mips releases, but test on
        # mips for big-endian coverage.)
        - nightly
        - nightly-musl
        - nightly-32
        # - nightly-mips
        - nightly-arm
        - macos
        - win-msvc
        - win-gnu
        include:
        - build: pinned
          os: ubuntu-18.04
          rust: 1.59.0
        - build: stable
          os: ubuntu-18.04
          rust: stable
        - build: beta
          os: ubuntu-18.04
          rust: beta
        - build: nightly
          os: ubuntu-18.04
          rust: nightly
        - build: nightly-musl
          os: ubuntu-18.04
          rust: nightly
          target: x86_64-unknown-linux-musl
        - build: nightly-32
          os: ubuntu-18.04
          rust: nightly
          target: i686-unknown-linux-gnu
        # - build: nightly-mips
        #   os: ubuntu-18.04
        #   rust: nightly
        #   target: mips64-unknown-linux-gnuabi64
        - build: nightly-arm
          os: ubuntu-18.04
          rust: nightly
          # For stripping release binaries:
          # docker run --rm -v $PWD/target:/target:Z \
          #   rustembedded/cross:arm-unknown-linux-gnueabihf \
          #   arm-linux-gnueabihf-strip \
          #   /target/arm-unknown-linux-gnueabihf/debug/rg
          target: arm-unknown-linux-gnueabihf
        - build: macos
          os: macos-latest
          rust: stable
        - build: win-msvc
          os: windows-2019
          rust: stable
          # This is currently broken due to ICE, prob too-old mingw 8.1
        - build: win-gnu
          #os: windows-2019
          os: ubuntu-18.04
          rust: stable
          target: x86_64-pc-windows-gnu
    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@9b0655f430fba8c7001d4e38f8d4306db5c6e0ab
      with:
        egress-policy: block
        allowed-endpoints: >
          github.com:443
          ppa.launchpad.net:443
          ppa.launchpad.net:80
          packages.microsoft.com:443
          azure.archive.ubuntu.com:80
          azure.archive.ubuntu.com:443
          api.snapcraft.io:80
          api.snapcraft.io:443
          static.rust-lang.org:443
          crates.io:443
          static.crates.io:443
          registry-1.docker.io:443
          auth.docker.io:443
          production.cloudflare.docker.com:443

    - name: Checkout repository
      uses: actions/checkout@629c2de402a417ea7690ca6ce3f33229e27606a5 # v2

    - name: Install packages (Ubuntu)
      if: matrix.os == 'ubuntu-18.04'
      run: |
        ci/ubuntu-install-packages
    - name: Install packages (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        ci/macos-install-packages
    - name: Install Rust
      uses: actions-rs/toolchain@63eb9591781c46a70274cb3ebdf190fce92702e8 # v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true

    - name: Use Cross
      if: matrix.target != ''
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV
    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
    - name: Build lifter and all crates
      run: ${{ env.CARGO }} build --verbose --workspace ${{ env.TARGET_FLAGS }}

    # This is useful for debugging problems when the expected build artifacts
    # (like shell completions and man pages) aren't generated.
    - name: Show build.rs stderr
      shell: bash
      run: |
        set +x
        stderr="$(find "${{ env.TARGET_DIR }}/debug" -name stderr -print0 | xargs -0 ls -t | head -n1)"
        if [ -s "$stderr" ]; then
          echo "===== $stderr ===== "
          cat "$stderr"
          echo "====="
        fi
        set -x
    - name: Run tests
      if: matrix.target != ''
      run: ${{ env.CARGO }} test --verbose --workspace ${{ env.TARGET_FLAGS }}

    # - name: Test for existence of build artifacts (Windows)
    #   if: matrix.os == 'windows-2019'
    #   shell: bash
    #   run: |
    #     outdir="$(ci/cargo-out-dir "${{ env.TARGET_DIR }}")"
    #     ls "$outdir/_rg.ps1" && file "$outdir/_rg.ps1"
    # - name: Test for existence of build artifacts (Unix)
    #   if: matrix.os != 'windows-2019'
    #   shell: bash
    #   run: |
    #     outdir="$(ci/cargo-out-dir "${{ env.TARGET_DIR }}")"
    #     # TODO: Check for the man page generation here. For whatever reason,
    #     # it seems to be intermittently failing in CI. No idea why.
    #     # for f in rg.bash rg.fish rg.1; do
    #     for f in rg.bash rg.fish; do
    #       # We could use file -E here, but it isn't supported on macOS.
    #       ls "$outdir/$f" && file "$outdir/$f"
    #     done
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-18.04
    needs: dependency-scan
    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@9b0655f430fba8c7001d4e38f8d4306db5c6e0ab # v1
      with:
        egress-policy: block
        allowed-endpoints: >
          github.com:443
          static.rust-lang.org:443

    - name: Checkout repository
      uses: actions/checkout@629c2de402a417ea7690ca6ce3f33229e27606a5 # v2
    - name: Install Rust
      uses: actions-rs/toolchain@63eb9591781c46a70274cb3ebdf190fce92702e8 # v1
      with:
        toolchain: stable
        override: true
        profile: minimal
        components: rustfmt
    - name: Check formatting
      run: |
        cargo fmt --all -- --check
  docs:
    name: Docs
    runs-on: ubuntu-20.04
    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@9b0655f430fba8c7001d4e38f8d4306db5c6e0ab # v1
      with:
        egress-policy: block
        allowed-endpoints: >
          crates.io:443
          github.com:443
          static.crates.io:443
          static.rust-lang.org:443

    - name: Checkout repository
      uses: actions/checkout@629c2de402a417ea7690ca6ce3f33229e27606a5 # v2
    - name: Install Rust
      uses: actions-rs/toolchain@63eb9591781c46a70274cb3ebdf190fce92702e8 # v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Check documentation
      env:
        RUSTDOCFLAGS: -D warnings
      run: cargo doc --no-deps --document-private-items --workspace

  dependency-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@9b0655f430fba8c7001d4e38f8d4306db5c6e0ab
      with:
        egress-policy: block
        allowed-endpoints: >
          api.github.com:443
          ghcr.io:443
          github.com:443
          pkg-containers.githubusercontent.com:443

    - name: Checkout the code
      uses: actions/checkout@629c2de402a417ea7690ca6ce3f33229e27606a5 # v2
      with:
        fetch-depth: 0
        persist-credentials: false

    - name: Run vulnerability scanner in repo mode
      if: github.actor != 'dependabot[bot]'
      uses: aquasecurity/trivy-action@a7a829a4345428ddd92ca57b18257440f6a18c90 # 0.2.2
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'sarif'
        vuln-type: 'library'
        severity: 'CRITICAL,HIGH'
        output: 'trivy-results.sarif'


    - name: Run vulnerability scanner in repo mode
      if: github.actor == 'dependabot[bot]'
      uses: aquasecurity/trivy-action@a7a829a4345428ddd92ca57b18257440f6a18c90 # 0.2.2
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        exit-code: 1
        format: 'sarif'
        vuln-type: 'library'
        severity: 'MEDIUM,HIGH,CRITICAL'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@1ed1437484560351c5be56cf73a48a279d116b78 # v1
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
